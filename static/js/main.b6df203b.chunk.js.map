{"version":3,"sources":["img/logo-header.svg","img/meet.png","img/mov.png","img/pok.png","components/Navbarclass.js","components/Projects/ProjectCard.jsx","img/chat.png","img/ach2.mp4","img/meet-video.mp4","img/flix-video.webm","img/video 5.3.mp4","components/Footer.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Navbarclass","ProjectCard","props","useState","modalIsOpen","setModalIsOpen","Card","className","Header","header","Body","Img","src","imgPath","Title","title","Text","style","textAlign","description","Button","href","github","application","onClick","isOpen","onRequestClose","center","url","URl","controls","width","height","rootElement","document","getElementById","ReactDOM","render","Footer","App","basename","to","exact","path","component","Home","About","Component","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uRAAe,I,YCAA,ICAA,ICAA,I,YCoDAA,I,0DC9Cf,SAASC,EAAYC,GACnB,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,OACE,8BACE,eAACC,EAAA,EAAD,CAAMC,UAAU,oBAAhB,UACE,cAACD,EAAA,EAAKE,OAAN,CAAaD,UAAU,SAAvB,SAAiCL,EAAMO,SACvC,eAACH,EAAA,EAAKI,KAAN,WACE,cAACJ,EAAA,EAAKK,IAAN,CAAUC,IAAKV,EAAMW,QAASN,UAAU,eACxC,cAACD,EAAA,EAAKQ,MAAN,CAAYP,UAAU,aAAtB,SAAoCL,EAAMa,QAC1C,cAACT,EAAA,EAAKU,KAAN,CAAWT,UAAU,OAAOU,MAAO,CAAEC,UAAW,WAAhD,SACGhB,EAAMiB,cAET,cAACC,EAAA,EAAD,CAAQb,UAAU,eAAec,KAAMnB,EAAMoB,OAA7C,kBACA,cAACF,EAAA,EAAD,CAAQb,UAAU,eAAec,KAAMnB,EAAMqB,YAA7C,yBACA,cAACH,EAAA,EAAD,CAAQb,UAAU,eAAeiB,QAAS,kBAAMnB,GAAe,IAA/D,kBACA,cAAC,IAAD,CAAOE,UAAU,SAASkB,OAAQrB,EAAasB,eAAgB,kBAAMrB,GAAe,IAClFsB,QAAM,EADR,SAEE,8BACE,cAAC,IAAD,CAAaC,IAAK1B,EAAM2B,IAAKC,UAAU,EAAMC,MAAM,OACjDC,OAAO,oCASvB,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAACpC,EAAD,IAAiBgC,GCnClB,ICAA,ICAA,ICAA,ICAA,I,MCgDAK,I,OCvBTC,G,kKACJ,WACE,OACE,cAAC,IAAD,CAAYC,SAAS,IAArB,SACE,gCACE,+BACE,6BAAI,cAAC,IAAD,CAAMC,GAAG,IAAT,oBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,SAAT,wBAGN,uBAEA,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,cAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,a,GAbxBC,cAoBZF,EAAO,kBAAM,8BAAK,yCAClBC,EAAQ,kBAAM,8BAAK,0CAEVP,ICpCKS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAWeC,EAXS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdlB,IAASC,OACP,cAAC,IAAMyB,WAAP,UACE,cAAC,EAAD,MAEF5B,SAASC,eAAe,SFqHpB,kBAAmB4B,WACrBA,UAAUC,cAAcC,MACrBT,MAAK,SAACU,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YExH5BlB,M","file":"static/js/main.b6df203b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-header.e708f597.svg\";","export default __webpack_public_path__ + \"static/media/meet.43493796.png\";","export default __webpack_public_path__ + \"static/media/mov.e650ac5f.png\";","export default __webpack_public_path__ + \"static/media/pok.28f018e9.png\";","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport icon from '../img/logo-header.svg'\r\nimport {\r\n  AiOutlineHome,\r\n  AiOutlineFundProjectionScreen,\r\n  AiOutlineUser,\r\n} from \"react-icons/ai\";\r\nfunction Navbarclass() {\r\n  return (\r\n    <div>\r\n      <Navbar collapseOnSelect expand=\"lg\" >\r\n        <Navbar.Brand href=\"https://wafachaari.github.io/final/\" >\r\n          <img src={icon} className=\"img-fluid logo\" alt=\"brand\" /></Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"ml-auto\" defaultActiveKey=\"#home\" >\r\n            <Nav.Item>\r\n              <Nav.Link className=\"navlink\" as={Link} to=\"/final\">\r\n                <AiOutlineHome style={{ marginBottom: \"2px\" }} />\r\n                Home\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link className=\"navlink\"  \r\n              \r\n       to=\"/About\"\r\n              \r\n              >\r\n               \r\n               \r\n               \r\n               \r\n               \r\n                <AiOutlineUser style={{ marginBottom: \"2px\" }} />\r\n                About\r\n              </Nav.Link>\r\n            </Nav.Item><Nav.Item>\r\n              <Nav.Link className=\"navlink\" as={Link} to=\"#Projects\">\r\n                <AiOutlineFundProjectionScreen\r\n                  style={{ marginBottom: \"2px\" }}\r\n                />{\" \"}\r\n                projects\r\n              </Nav.Link></Nav.Item>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      <div className=\"ligne\" ></div>\r\n    </div>\r\n  )\r\n}\r\nexport default Navbarclass;","import Card from 'react-bootstrap/Card';\r\nimport React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ReactDOM from 'react-dom';\r\nimport Modal from 'react-modal';\r\nimport ReactPlayer from 'react-player'\r\nfunction ProjectCard(props) {\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  return (\r\n    <div>\r\n      <Card className=\"project-card-view\">\r\n        <Card.Header className=\"header\">{props.header}</Card.Header>\r\n        <Card.Body  >\r\n          <Card.Img src={props.imgPath} className=\"image-card\" />\r\n          <Card.Title className=\"card-title\">{props.title}</Card.Title>\r\n          <Card.Text className=\"text\" style={{ textAlign: \"justify\" }}>\r\n            {props.description}\r\n          </Card.Text>\r\n          <Button className=\"button-class\" href={props.github}>Code</Button>\r\n          <Button className=\"button-class\" href={props.application}>Application</Button>\r\n          <Button className=\"button-class\" onClick={() => setModalIsOpen(true)} >Demo</Button>\r\n          <Modal className=\"modalk\" isOpen={modalIsOpen} onRequestClose={() => setModalIsOpen(false)}\r\n            center>\r\n            <div>\r\n              <ReactPlayer url={props.URl} controls={true} width=\"100%\"\r\n                height=\"calc(100vh - 100px)\" ></ReactPlayer>\r\n            </div>\r\n          </Modal>\r\n        </Card.Body>\r\n      </Card>\r\n\r\n    </div>\r\n  );\r\n}\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<ProjectCard />, rootElement);\r\nexport default ProjectCard;","export default __webpack_public_path__ + \"static/media/chat.3de92dba.png\";","export default __webpack_public_path__ + \"static/media/ach2.1691f6c8.mp4\";","export default __webpack_public_path__ + \"static/media/meet-video.33560c75.mp4\";","export default __webpack_public_path__ + \"static/media/flix-video.8f90a98c.webm\";","export default __webpack_public_path__ + \"static/media/video 5.3.305a3eda.mp4\";","import React from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport git from '../img/github.png'\r\nimport twitter from '../img/twitter.png'\r\nimport link from '../img/link3.png'\r\nimport inst from '../img/inst.png'\r\nfunction Footer() {\r\n  return (\r\n    <Container fluid className=\"footer\">\r\n      <Row>\r\n        <Col md=\"4\"  >\r\n          <h2 className=\"text-black\">\r\n            Reach Out to me!\r\n          </h2>\r\n          <p className=\"paragraph\">\r\n            Discuss a project or just want to say Hi?!!\r\n          </p>\r\n          <p className=\"paragraph\"> Feel free to <span className=\"white\">connect </span> with me\r\n          </p>\r\n          <div className=\"icon\">\r\n            <a\r\n              href=\" https://github.com/wafachaari\"\r\n              style={{ color: \"black\" }}\r\n            >\r\n              <img alt=\"git\" src={git}></img>\r\n            </a>\r\n            <a\r\n              href=\" \"\r\n              style={{ color: \"black\" }}\r\n            ><img alt=\"link\" src={link}></img>\r\n            </a>\r\n            <a\r\n              href=\" https://twitter.com/wafa_chaari \"\r\n              style={{ color: \"black\" }}\r\n            ><img alt=\"twitter\" src={twitter}></img>\r\n            </a>\r\n            <a\r\n              href=\" https://twitter.com/wafa_chaari\"\r\n              style={{ color: \"black\" }}\r\n            >\r\n              <img alt=\"inst\" src={inst}></img>\r\n            </a>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\nexport default Footer;\r\n"," \nimport \"./style.css\";\nimport \"./App.css\";\nimport Navbarclass from \"./components/Navbarclass\";\nimport React, { Component } from 'react';\nimport { HashRouter, Link } from \"react-router-dom\";\n\nimport Projects from \"./components/Projects/Projects\";\nimport Footer from \"./components/Footer\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n/*function App() {\n  return (\n    <Router>\n      <div className=\"App\" >\n        <Navbarclass />\n         \n          <Route path=\"/final\"   component={Home} />\n          <About></About><Projects></Projects>\n             \n        <Footer />\n      </div></Router>\n  );\n}\nexport default App;*/\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <div>\n          <ul>\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/About\">About</Link></li>\n          </ul>\n\n          <hr />\n  \n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nconst Home = () => <div><h2>Home</h2></div>\nconst About = () => <div><h2>About</h2></div>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorkerRegistration.unregister();\nreportWebVitals();\n"],"sourceRoot":""}